{"version":3,"file":"static/js/12.d52a34be.chunk.js","mappings":"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AANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACM,MAANA,GACCA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACf,OAANA,GACM,OAANA,GACM,OAANA,GACCA,GAAK,MAAUA,GAAK,MACf,OAANA,GACM,OAANA,GACM,OAANA,GACCA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACf,OAANA,GACM,OAANA,GACCA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACf,OAANA,GACM,OAANA,GACM,OAANA,GACCA,GAAK,MAAUA,GAAK,MACf,OAANA,GACM,OAANA,GACCA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACf,OAANA,GACCA,GAAK,MAAUA,GAAK,MACf,OAANA,GACCA,GAAK,MAAUA,GAAK,MACf,OAANA,GACCA,GAAK,MAAUA,GAAK,MACf,OAANA,GACCA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACf,OAANA,GACM,OAANA,GACM,OAANA,GACCA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACf,OAANA,GACM,OAANA,GACM,OAANA,GACM,OAANA,GACCA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,KACf,OAANA,GACM,OAANA,GACCA,GAAK,MAAUA,GAAK,MACf,OAANA,GACCA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACf,OAANA,GACCA,GAAK,MAAUA,GAAK,MACf,OAANA,GACCA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACpBA,GAAK,MAAUA,GAAK,MACf,OAANA,GACCA,GAAK,MAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACf,QAANA,GACCA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACf,QAANA,GACCA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACf,QAANA,GACCA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACf,QAANA,GACCA,GAAK,OAAUA,GAAK,OACpBA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,OACf,QAANA,GACM,QAANA,GACM,QAANA,GACM,QAANA,GACCA,GAAK,OAAUA,GAAK,MC7uC7B,SAASiR,GAAcC,GACnBA,EAAIpS,SAAQ,SAAUC,GAElB,UADOA,EAAGiM,SACN9L,EAAgBH,IAAOE,EAAgBF,GACvC,IAAK,IAAI0J,KAAK1J,EAAGO,eACNP,EAAGO,QAAQmJ,GAAGuC,SACrBiG,GAAclS,EAAGO,QAAQmJ,GAAG9K,YAG3BgD,EAAgB5B,IAAOuC,EAAiBvC,EAAG4C,SAG1Cd,EAAc9B,IAAOgC,EAAchC,KACzCwC,EAAmBxC,EAAG4C,cAHf5C,EAAG4C,MAAMqJ,SAMXxL,EAAaT,IAClBkS,GAAclS,EAAGU,aAItB,SAASnB,GAAMiL,EAAS4H,QACd,IAATA,IAAmBA,EAAO,IAC9BA,GAAOhM,EAAAA,EAAAA,UAAS,CAAE2E,sBAAsB,EAAMD,qBAAqB,GAAQsH,GAC3E,IAAInP,EAAS,IAAIsH,GAAOC,EAAS4H,GAAM7S,QACvC,GAAI0D,EAAOsI,IAAK,CACZ,IAAIG,EAAQ2G,YAAY7Q,EAAUyB,EAAOsI,IAAIqG,OAK7C,MAHAlG,EAAMO,SAAWhJ,EAAOsI,IAAIU,SAE5BP,EAAM4G,gBAAkBrP,EAAOsI,IAAIf,QAC7BkB,EAKV,OAHe,OAAT0G,QAA0B,IAATA,OAAkB,EAASA,EAAKG,kBACnDL,GAAcjP,EAAOuI,KAElBvI,EAAOuI","sources":["../node_modules/@formatjs/cli/src/pseudo_locale.js","../node_modules/@formatjs/icu-messageformat-parser/lib/error.js","../node_modules/@formatjs/icu-messageformat-parser/lib/types.js","../node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js","../node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js","../node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js","../node_modules/@formatjs/icu-skeleton-parser/lib/number.js","../node_modules/@formatjs/icu-messageformat-parser/lib/parser.js","../node_modules/@formatjs/icu-messageformat-parser/lib/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.generateENXB = exports.generateENXA = exports.generateXXHA = exports.generateXXAC = exports.generateXXLS = void 0;\nvar tslib_1 = require(\"tslib\");\nvar icu_messageformat_parser_1 = require(\"@formatjs/icu-messageformat-parser\");\nfunction generateXXLS(msg) {\n    var ast = typeof msg === 'string' ? icu_messageformat_parser_1.parse(msg) : msg;\n    var lastChunk = ast.pop();\n    if (lastChunk && icu_messageformat_parser_1.isLiteralElement(lastChunk)) {\n        lastChunk.value += 'SSSSSSSSSSSSSSSSSSSSSSSSS';\n        return tslib_1.__spreadArray(tslib_1.__spreadArray([], ast), [lastChunk]);\n    }\n    return tslib_1.__spreadArray(tslib_1.__spreadArray([], ast), [{ type: icu_messageformat_parser_1.TYPE.literal, value: 'SSSSSSSSSSSSSSSSSSSSSSSSS' }]);\n}\nexports.generateXXLS = generateXXLS;\nfunction generateXXAC(msg) {\n    var ast = typeof msg === 'string' ? icu_messageformat_parser_1.parse(msg) : msg;\n    ast.forEach(function (el) {\n        if (icu_messageformat_parser_1.isLiteralElement(el)) {\n            el.value = el.value.toUpperCase();\n        }\n        else if (icu_messageformat_parser_1.isPluralElement(el) || icu_messageformat_parser_1.isSelectElement(el)) {\n            for (var _i = 0, _a = Object.values(el.options); _i < _a.length; _i++) {\n                var opt = _a[_i];\n                generateXXAC(opt.value);\n            }\n        }\n        else if (icu_messageformat_parser_1.isTagElement(el)) {\n            generateXXAC(el.children);\n        }\n    });\n    return ast;\n}\nexports.generateXXAC = generateXXAC;\nfunction generateXXHA(msg) {\n    var ast = typeof msg === 'string' ? icu_messageformat_parser_1.parse(msg) : msg;\n    var firstChunk = ast.shift();\n    if (firstChunk && icu_messageformat_parser_1.isLiteralElement(firstChunk)) {\n        firstChunk.value = '[javascript]' + firstChunk.value;\n        return tslib_1.__spreadArray([firstChunk], ast);\n    }\n    return tslib_1.__spreadArray([{ type: icu_messageformat_parser_1.TYPE.literal, value: '[javascript]' }], ast);\n}\nexports.generateXXHA = generateXXHA;\nvar ASCII = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\nvar ACCENTED_ASCII = 'âḃćḋèḟĝḫíĵǩĺṁńŏṗɋŕśṭůṿẘẋẏẓḀḂḈḊḔḞḠḢḬĴḴĻḾŊÕṔɊŔṠṮŨṼẄẌŸƵ';\nfunction generateENXA(msg) {\n    var ast = typeof msg === 'string' ? icu_messageformat_parser_1.parse(msg) : msg;\n    ast.forEach(function (el) {\n        if (icu_messageformat_parser_1.isLiteralElement(el)) {\n            el.value = el.value\n                .split('')\n                .map(function (c) {\n                var i = ASCII.indexOf(c);\n                if (i < 0) {\n                    return c;\n                }\n                return ACCENTED_ASCII[i];\n            })\n                .join('');\n        }\n        else if (icu_messageformat_parser_1.isPluralElement(el) || icu_messageformat_parser_1.isSelectElement(el)) {\n            for (var _i = 0, _a = Object.values(el.options); _i < _a.length; _i++) {\n                var opt = _a[_i];\n                generateENXA(opt.value);\n            }\n        }\n        else if (icu_messageformat_parser_1.isTagElement(el)) {\n            generateENXA(el.children);\n        }\n    });\n    return ast;\n}\nexports.generateENXA = generateENXA;\nfunction generateENXB(msg) {\n    var ast = typeof msg === 'string' ? icu_messageformat_parser_1.parse(msg) : msg;\n    ast.forEach(function (el) {\n        if (icu_messageformat_parser_1.isLiteralElement(el)) {\n            var pseudoString = el.value\n                .split('')\n                .map(function (c, index) {\n                var i = ASCII.indexOf(c);\n                var canPad = (index + 1) % 3 === 0;\n                if (i < 0) {\n                    return c;\n                }\n                return canPad ? ACCENTED_ASCII[i].repeat(3) : ACCENTED_ASCII[i];\n            })\n                .join('');\n            el.value = \"[!! \" + pseudoString + \" !!]\";\n        }\n        else if (icu_messageformat_parser_1.isPluralElement(el) || icu_messageformat_parser_1.isSelectElement(el)) {\n            for (var _i = 0, _a = Object.values(el.options); _i < _a.length; _i++) {\n                var opt = _a[_i];\n                generateENXB(opt.value);\n            }\n        }\n        else if (icu_messageformat_parser_1.isTagElement(el)) {\n            generateENXB(el.children);\n        }\n    });\n    return ast;\n}\nexports.generateENXB = generateENXB;\n","export var ErrorKind;\n(function (ErrorKind) {\n    /** Argument is unclosed (e.g. `{0`) */\n    ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_CLOSING_BRACE\"] = 1] = \"EXPECT_ARGUMENT_CLOSING_BRACE\";\n    /** Argument is empty (e.g. `{}`). */\n    ErrorKind[ErrorKind[\"EMPTY_ARGUMENT\"] = 2] = \"EMPTY_ARGUMENT\";\n    /** Argument is malformed (e.g. `{foo!}``) */\n    ErrorKind[ErrorKind[\"MALFORMED_ARGUMENT\"] = 3] = \"MALFORMED_ARGUMENT\";\n    /** Expect an argument type (e.g. `{foo,}`) */\n    ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_TYPE\"] = 4] = \"EXPECT_ARGUMENT_TYPE\";\n    /** Unsupported argument type (e.g. `{foo,foo}`) */\n    ErrorKind[ErrorKind[\"INVALID_ARGUMENT_TYPE\"] = 5] = \"INVALID_ARGUMENT_TYPE\";\n    /** Expect an argument style (e.g. `{foo, number, }`) */\n    ErrorKind[ErrorKind[\"EXPECT_ARGUMENT_STYLE\"] = 6] = \"EXPECT_ARGUMENT_STYLE\";\n    /** The number skeleton is invalid. */\n    ErrorKind[ErrorKind[\"INVALID_NUMBER_SKELETON\"] = 7] = \"INVALID_NUMBER_SKELETON\";\n    /** The date time skeleton is invalid. */\n    ErrorKind[ErrorKind[\"INVALID_DATE_TIME_SKELETON\"] = 8] = \"INVALID_DATE_TIME_SKELETON\";\n    /** Exepct a number skeleton following the `::` (e.g. `{foo, number, ::}`) */\n    ErrorKind[ErrorKind[\"EXPECT_NUMBER_SKELETON\"] = 9] = \"EXPECT_NUMBER_SKELETON\";\n    /** Exepct a date time skeleton following the `::` (e.g. `{foo, date, ::}`) */\n    ErrorKind[ErrorKind[\"EXPECT_DATE_TIME_SKELETON\"] = 10] = \"EXPECT_DATE_TIME_SKELETON\";\n    /** Unmatched apostrophes in the argument style (e.g. `{foo, number, 'test`) */\n    ErrorKind[ErrorKind[\"UNCLOSED_QUOTE_IN_ARGUMENT_STYLE\"] = 11] = \"UNCLOSED_QUOTE_IN_ARGUMENT_STYLE\";\n    /** Missing select argument options (e.g. `{foo, select}`) */\n    ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_OPTIONS\"] = 12] = \"EXPECT_SELECT_ARGUMENT_OPTIONS\";\n    /** Expecting an offset value in `plural` or `selectordinal` argument (e.g `{foo, plural, offset}`) */\n    ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE\"] = 13] = \"EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE\";\n    /** Offset value in `plural` or `selectordinal` is invalid (e.g. `{foo, plural, offset: x}`) */\n    ErrorKind[ErrorKind[\"INVALID_PLURAL_ARGUMENT_OFFSET_VALUE\"] = 14] = \"INVALID_PLURAL_ARGUMENT_OFFSET_VALUE\";\n    /** Expecting a selector in `select` argument (e.g `{foo, select}`) */\n    ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_SELECTOR\"] = 15] = \"EXPECT_SELECT_ARGUMENT_SELECTOR\";\n    /** Expecting a selector in `plural` or `selectordinal` argument (e.g `{foo, plural}`) */\n    ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_SELECTOR\"] = 16] = \"EXPECT_PLURAL_ARGUMENT_SELECTOR\";\n    /** Expecting a message fragment after the `select` selector (e.g. `{foo, select, apple}`) */\n    ErrorKind[ErrorKind[\"EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\"] = 17] = \"EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\";\n    /**\n     * Expecting a message fragment after the `plural` or `selectordinal` selector\n     * (e.g. `{foo, plural, one}`)\n     */\n    ErrorKind[ErrorKind[\"EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT\"] = 18] = \"EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT\";\n    /** Selector in `plural` or `selectordinal` is malformed (e.g. `{foo, plural, =x {#}}`) */\n    ErrorKind[ErrorKind[\"INVALID_PLURAL_ARGUMENT_SELECTOR\"] = 19] = \"INVALID_PLURAL_ARGUMENT_SELECTOR\";\n    /**\n     * Duplicate selectors in `plural` or `selectordinal` argument.\n     * (e.g. {foo, plural, one {#} one {#}})\n     */\n    ErrorKind[ErrorKind[\"DUPLICATE_PLURAL_ARGUMENT_SELECTOR\"] = 20] = \"DUPLICATE_PLURAL_ARGUMENT_SELECTOR\";\n    /** Duplicate selectors in `select` argument.\n     * (e.g. {foo, select, apple {apple} apple {apple}})\n     */\n    ErrorKind[ErrorKind[\"DUPLICATE_SELECT_ARGUMENT_SELECTOR\"] = 21] = \"DUPLICATE_SELECT_ARGUMENT_SELECTOR\";\n    /** Plural or select argument option must have `other` clause. */\n    ErrorKind[ErrorKind[\"MISSING_OTHER_CLAUSE\"] = 22] = \"MISSING_OTHER_CLAUSE\";\n    /** The tag is malformed. (e.g. `<bold!>foo</bold!>) */\n    ErrorKind[ErrorKind[\"INVALID_TAG\"] = 23] = \"INVALID_TAG\";\n    /** The tag name is invalid. (e.g. `<123>foo</123>`) */\n    ErrorKind[ErrorKind[\"INVALID_TAG_NAME\"] = 25] = \"INVALID_TAG_NAME\";\n    /** The closing tag does not match the opening tag. (e.g. `<bold>foo</italic>`) */\n    ErrorKind[ErrorKind[\"UNMATCHED_CLOSING_TAG\"] = 26] = \"UNMATCHED_CLOSING_TAG\";\n    /** The opening tag has unmatched closing tag. (e.g. `<bold>foo`) */\n    ErrorKind[ErrorKind[\"UNCLOSED_TAG\"] = 27] = \"UNCLOSED_TAG\";\n})(ErrorKind || (ErrorKind = {}));\n","export var TYPE;\n(function (TYPE) {\n    /**\n     * Raw text\n     */\n    TYPE[TYPE[\"literal\"] = 0] = \"literal\";\n    /**\n     * Variable w/o any format, e.g `var` in `this is a {var}`\n     */\n    TYPE[TYPE[\"argument\"] = 1] = \"argument\";\n    /**\n     * Variable w/ number format\n     */\n    TYPE[TYPE[\"number\"] = 2] = \"number\";\n    /**\n     * Variable w/ date format\n     */\n    TYPE[TYPE[\"date\"] = 3] = \"date\";\n    /**\n     * Variable w/ time format\n     */\n    TYPE[TYPE[\"time\"] = 4] = \"time\";\n    /**\n     * Variable w/ select format\n     */\n    TYPE[TYPE[\"select\"] = 5] = \"select\";\n    /**\n     * Variable w/ plural format\n     */\n    TYPE[TYPE[\"plural\"] = 6] = \"plural\";\n    /**\n     * Only possible within plural argument.\n     * This is the `#` symbol that will be substituted with the count.\n     */\n    TYPE[TYPE[\"pound\"] = 7] = \"pound\";\n    /**\n     * XML-like tag\n     */\n    TYPE[TYPE[\"tag\"] = 8] = \"tag\";\n})(TYPE || (TYPE = {}));\nexport var SKELETON_TYPE;\n(function (SKELETON_TYPE) {\n    SKELETON_TYPE[SKELETON_TYPE[\"number\"] = 0] = \"number\";\n    SKELETON_TYPE[SKELETON_TYPE[\"dateTime\"] = 1] = \"dateTime\";\n})(SKELETON_TYPE || (SKELETON_TYPE = {}));\n/**\n * Type Guards\n */\nexport function isLiteralElement(el) {\n    return el.type === TYPE.literal;\n}\nexport function isArgumentElement(el) {\n    return el.type === TYPE.argument;\n}\nexport function isNumberElement(el) {\n    return el.type === TYPE.number;\n}\nexport function isDateElement(el) {\n    return el.type === TYPE.date;\n}\nexport function isTimeElement(el) {\n    return el.type === TYPE.time;\n}\nexport function isSelectElement(el) {\n    return el.type === TYPE.select;\n}\nexport function isPluralElement(el) {\n    return el.type === TYPE.plural;\n}\nexport function isPoundElement(el) {\n    return el.type === TYPE.pound;\n}\nexport function isTagElement(el) {\n    return el.type === TYPE.tag;\n}\nexport function isNumberSkeleton(el) {\n    return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.number);\n}\nexport function isDateTimeSkeleton(el) {\n    return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.dateTime);\n}\nexport function createLiteralElement(value) {\n    return {\n        type: TYPE.literal,\n        value: value,\n    };\n}\nexport function createNumberElement(value, style) {\n    return {\n        type: TYPE.number,\n        value: value,\n        style: style,\n    };\n}\n","// @generated from regex-gen.ts\nexport var SPACE_SEPARATOR_REGEX = /[ \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\nexport var WHITE_SPACE_REGEX = /[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/;\n","/**\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n * with some tweaks\n */\nvar DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n/**\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * @public\n * @param skeleton skeleton string\n */\nexport function parseDateTimeSkeleton(skeleton) {\n    var result = {};\n    skeleton.replace(DATE_TIME_REGEX, function (match) {\n        var len = match.length;\n        switch (match[0]) {\n            // Era\n            case 'G':\n                result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n                break;\n            // Year\n            case 'y':\n                result.year = len === 2 ? '2-digit' : 'numeric';\n                break;\n            case 'Y':\n            case 'u':\n            case 'U':\n            case 'r':\n                throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');\n            // Quarter\n            case 'q':\n            case 'Q':\n                throw new RangeError('`q/Q` (quarter) patterns are not supported');\n            // Month\n            case 'M':\n            case 'L':\n                result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\n                break;\n            // Week\n            case 'w':\n            case 'W':\n                throw new RangeError('`w/W` (week) patterns are not supported');\n            case 'd':\n                result.day = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'D':\n            case 'F':\n            case 'g':\n                throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');\n            // Weekday\n            case 'E':\n                result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';\n                break;\n            case 'e':\n                if (len < 4) {\n                    throw new RangeError('`e..eee` (weekday) patterns are not supported');\n                }\n                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n                break;\n            case 'c':\n                if (len < 4) {\n                    throw new RangeError('`c..ccc` (weekday) patterns are not supported');\n                }\n                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n                break;\n            // Period\n            case 'a': // AM, PM\n                result.hour12 = true;\n                break;\n            case 'b': // am, pm, noon, midnight\n            case 'B': // flexible day periods\n                throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');\n            // Hour\n            case 'h':\n                result.hourCycle = 'h12';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'H':\n                result.hourCycle = 'h23';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'K':\n                result.hourCycle = 'h11';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'k':\n                result.hourCycle = 'h24';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'j':\n            case 'J':\n            case 'C':\n                throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\n            // Minute\n            case 'm':\n                result.minute = ['numeric', '2-digit'][len - 1];\n                break;\n            // Second\n            case 's':\n                result.second = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'S':\n            case 'A':\n                throw new RangeError('`S/A` (second) patterns are not supported, use `s` instead');\n            // Zone\n            case 'z': // 1..3, 4: specific non-location format\n                result.timeZoneName = len < 4 ? 'short' : 'long';\n                break;\n            case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n            case 'O': // 1, 4: miliseconds in day short, long\n            case 'v': // 1, 4: generic non-location format\n            case 'V': // 1, 2, 3, 4: time zone ID or city\n            case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n            case 'x': // 1, 2, 3, 4: The ISO8601 varios formats\n                throw new RangeError('`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead');\n        }\n        return '';\n    });\n    return result;\n}\n","// @generated from regex-gen.ts\nexport var WHITE_SPACE_REGEX = /[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/i;\n","import { __assign } from \"tslib\";\nimport { WHITE_SPACE_REGEX } from './regex.generated';\nexport function parseNumberSkeletonFromString(skeleton) {\n    if (skeleton.length === 0) {\n        throw new Error('Number skeleton cannot be empty');\n    }\n    // Parse the skeleton\n    var stringTokens = skeleton\n        .split(WHITE_SPACE_REGEX)\n        .filter(function (x) { return x.length > 0; });\n    var tokens = [];\n    for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {\n        var stringToken = stringTokens_1[_i];\n        var stemAndOptions = stringToken.split('/');\n        if (stemAndOptions.length === 0) {\n            throw new Error('Invalid number skeleton');\n        }\n        var stem = stemAndOptions[0], options = stemAndOptions.slice(1);\n        for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {\n            var option = options_1[_a];\n            if (option.length === 0) {\n                throw new Error('Invalid number skeleton');\n            }\n        }\n        tokens.push({ stem: stem, options: options });\n    }\n    return tokens;\n}\nfunction icuUnitToEcma(unit) {\n    return unit.replace(/^(.*?)-/, '');\n}\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?$/g;\nvar INTEGER_WIDTH_REGEX = /(\\*)(0+)|(#+)(0+)|(0+)/g;\nvar CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;\nfunction parseSignificantPrecision(str) {\n    var result = {};\n    str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\n        // @@@ case\n        if (typeof g2 !== 'string') {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits = g1.length;\n        }\n        // @@@+ case\n        else if (g2 === '+') {\n            result.minimumSignificantDigits = g1.length;\n        }\n        // .### case\n        else if (g1[0] === '#') {\n            result.maximumSignificantDigits = g1.length;\n        }\n        // .@@## or .@@@ case\n        else {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits =\n                g1.length + (typeof g2 === 'string' ? g2.length : 0);\n        }\n        return '';\n    });\n    return result;\n}\nfunction parseSign(str) {\n    switch (str) {\n        case 'sign-auto':\n            return {\n                signDisplay: 'auto',\n            };\n        case 'sign-accounting':\n        case '()':\n            return {\n                currencySign: 'accounting',\n            };\n        case 'sign-always':\n        case '+!':\n            return {\n                signDisplay: 'always',\n            };\n        case 'sign-accounting-always':\n        case '()!':\n            return {\n                signDisplay: 'always',\n                currencySign: 'accounting',\n            };\n        case 'sign-except-zero':\n        case '+?':\n            return {\n                signDisplay: 'exceptZero',\n            };\n        case 'sign-accounting-except-zero':\n        case '()?':\n            return {\n                signDisplay: 'exceptZero',\n                currencySign: 'accounting',\n            };\n        case 'sign-never':\n        case '+_':\n            return {\n                signDisplay: 'never',\n            };\n    }\n}\nfunction parseConciseScientificAndEngineeringStem(stem) {\n    // Engineering\n    var result;\n    if (stem[0] === 'E' && stem[1] === 'E') {\n        result = {\n            notation: 'engineering',\n        };\n        stem = stem.slice(2);\n    }\n    else if (stem[0] === 'E') {\n        result = {\n            notation: 'scientific',\n        };\n        stem = stem.slice(1);\n    }\n    if (result) {\n        var signDisplay = stem.slice(0, 2);\n        if (signDisplay === '+!') {\n            result.signDisplay = 'always';\n            stem = stem.slice(2);\n        }\n        else if (signDisplay === '+?') {\n            result.signDisplay = 'exceptZero';\n            stem = stem.slice(2);\n        }\n        if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {\n            throw new Error('Malformed concise eng/scientific notation');\n        }\n        result.minimumIntegerDigits = stem.length;\n    }\n    return result;\n}\nfunction parseNotationOptions(opt) {\n    var result = {};\n    var signOpts = parseSign(opt);\n    if (signOpts) {\n        return signOpts;\n    }\n    return result;\n}\n/**\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\n */\nexport function parseNumberSkeleton(tokens) {\n    var result = {};\n    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n        var token = tokens_1[_i];\n        switch (token.stem) {\n            case 'percent':\n            case '%':\n                result.style = 'percent';\n                continue;\n            case '%x100':\n                result.style = 'percent';\n                result.scale = 100;\n                continue;\n            case 'currency':\n                result.style = 'currency';\n                result.currency = token.options[0];\n                continue;\n            case 'group-off':\n            case ',_':\n                result.useGrouping = false;\n                continue;\n            case 'precision-integer':\n            case '.':\n                result.maximumFractionDigits = 0;\n                continue;\n            case 'measure-unit':\n            case 'unit':\n                result.style = 'unit';\n                result.unit = icuUnitToEcma(token.options[0]);\n                continue;\n            case 'compact-short':\n            case 'K':\n                result.notation = 'compact';\n                result.compactDisplay = 'short';\n                continue;\n            case 'compact-long':\n            case 'KK':\n                result.notation = 'compact';\n                result.compactDisplay = 'long';\n                continue;\n            case 'scientific':\n                result = __assign(__assign(__assign({}, result), { notation: 'scientific' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));\n                continue;\n            case 'engineering':\n                result = __assign(__assign(__assign({}, result), { notation: 'engineering' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));\n                continue;\n            case 'notation-simple':\n                result.notation = 'standard';\n                continue;\n            // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n            case 'unit-width-narrow':\n                result.currencyDisplay = 'narrowSymbol';\n                result.unitDisplay = 'narrow';\n                continue;\n            case 'unit-width-short':\n                result.currencyDisplay = 'code';\n                result.unitDisplay = 'short';\n                continue;\n            case 'unit-width-full-name':\n                result.currencyDisplay = 'name';\n                result.unitDisplay = 'long';\n                continue;\n            case 'unit-width-iso-code':\n                result.currencyDisplay = 'symbol';\n                continue;\n            case 'scale':\n                result.scale = parseFloat(token.options[0]);\n                continue;\n            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n            case 'integer-width':\n                if (token.options.length > 1) {\n                    throw new RangeError('integer-width stems only accept a single optional option');\n                }\n                token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {\n                    if (g1) {\n                        result.minimumIntegerDigits = g2.length;\n                    }\n                    else if (g3 && g4) {\n                        throw new Error('We currently do not support maximum integer digits');\n                    }\n                    else if (g5) {\n                        throw new Error('We currently do not support exact integer digits');\n                    }\n                    return '';\n                });\n                continue;\n        }\n        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n        if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {\n            result.minimumIntegerDigits = token.stem.length;\n            continue;\n        }\n        if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n            // Precision\n            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision\n            // precision-integer case\n            if (token.options.length > 1) {\n                throw new RangeError('Fraction-precision stems only accept a single optional option');\n            }\n            token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {\n                // .000* case (before ICU67 it was .000+)\n                if (g2 === '*') {\n                    result.minimumFractionDigits = g1.length;\n                }\n                // .### case\n                else if (g3 && g3[0] === '#') {\n                    result.maximumFractionDigits = g3.length;\n                }\n                // .00## case\n                else if (g4 && g5) {\n                    result.minimumFractionDigits = g4.length;\n                    result.maximumFractionDigits = g4.length + g5.length;\n                }\n                else {\n                    result.minimumFractionDigits = g1.length;\n                    result.maximumFractionDigits = g1.length;\n                }\n                return '';\n            });\n            if (token.options.length) {\n                result = __assign(__assign({}, result), parseSignificantPrecision(token.options[0]));\n            }\n            continue;\n        }\n        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision\n        if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n            result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));\n            continue;\n        }\n        var signOpts = parseSign(token.stem);\n        if (signOpts) {\n            result = __assign(__assign({}, result), signOpts);\n        }\n        var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);\n        if (conciseScientificAndEngineeringOpts) {\n            result = __assign(__assign({}, result), conciseScientificAndEngineeringOpts);\n        }\n    }\n    return result;\n}\n","var _a;\nimport { __assign } from \"tslib\";\nimport { ErrorKind } from './error';\nimport { SKELETON_TYPE, TYPE, } from './types';\nimport { SPACE_SEPARATOR_REGEX } from './regex.generated';\nimport { parseNumberSkeleton, parseNumberSkeletonFromString, parseDateTimeSkeleton, } from '@formatjs/icu-skeleton-parser';\nvar SPACE_SEPARATOR_START_REGEX = new RegExp(\"^\" + SPACE_SEPARATOR_REGEX.source + \"*\");\nvar SPACE_SEPARATOR_END_REGEX = new RegExp(SPACE_SEPARATOR_REGEX.source + \"*$\");\nfunction createLocation(start, end) {\n    return { start: start, end: end };\n}\n// #region Ponyfills\n// Consolidate these variables up top for easier toggling during debugging\nvar hasNativeStartsWith = !!String.prototype.startsWith;\nvar hasNativeFromCodePoint = !!String.fromCodePoint;\nvar hasNativeFromEntries = !!Object.fromEntries;\nvar hasNativeCodePointAt = !!String.prototype.codePointAt;\nvar hasTrimStart = !!String.prototype.trimStart;\nvar hasTrimEnd = !!String.prototype.trimEnd;\nvar hasNativeIsSafeInteger = !!Number.isSafeInteger;\nvar isSafeInteger = hasNativeIsSafeInteger\n    ? Number.isSafeInteger\n    : function (n) {\n        return (typeof n === 'number' &&\n            isFinite(n) &&\n            Math.floor(n) === n &&\n            Math.abs(n) <= 0x1fffffffffffff);\n    };\n// IE11 does not support y and u.\nvar REGEX_SUPPORTS_U_AND_Y = true;\ntry {\n    var re = RE('([^\\\\p{White_Space}\\\\p{Pattern_Syntax}]*)', 'yu');\n    /**\n     * legacy Edge or Xbox One browser\n     * Unicode flag support: supported\n     * Pattern_Syntax support: not supported\n     * See https://github.com/formatjs/formatjs/issues/2822\n     */\n    REGEX_SUPPORTS_U_AND_Y = ((_a = re.exec('a')) === null || _a === void 0 ? void 0 : _a[0]) === 'a';\n}\ncatch (_) {\n    REGEX_SUPPORTS_U_AND_Y = false;\n}\nvar startsWith = hasNativeStartsWith\n    ? // Native\n        function startsWith(s, search, position) {\n            return s.startsWith(search, position);\n        }\n    : // For IE11\n        function startsWith(s, search, position) {\n            return s.slice(position, position + search.length) === search;\n        };\nvar fromCodePoint = hasNativeFromCodePoint\n    ? String.fromCodePoint\n    : // IE11\n        function fromCodePoint() {\n            var codePoints = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                codePoints[_i] = arguments[_i];\n            }\n            var elements = '';\n            var length = codePoints.length;\n            var i = 0;\n            var code;\n            while (length > i) {\n                code = codePoints[i++];\n                if (code > 0x10ffff)\n                    throw RangeError(code + ' is not a valid code point');\n                elements +=\n                    code < 0x10000\n                        ? String.fromCharCode(code)\n                        : String.fromCharCode(((code -= 0x10000) >> 10) + 0xd800, (code % 0x400) + 0xdc00);\n            }\n            return elements;\n        };\nvar fromEntries = \n// native\nhasNativeFromEntries\n    ? Object.fromEntries\n    : // Ponyfill\n        function fromEntries(entries) {\n            var obj = {};\n            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n                var _a = entries_1[_i], k = _a[0], v = _a[1];\n                obj[k] = v;\n            }\n            return obj;\n        };\nvar codePointAt = hasNativeCodePointAt\n    ? // Native\n        function codePointAt(s, index) {\n            return s.codePointAt(index);\n        }\n    : // IE 11\n        function codePointAt(s, index) {\n            var size = s.length;\n            if (index < 0 || index >= size) {\n                return undefined;\n            }\n            var first = s.charCodeAt(index);\n            var second;\n            return first < 0xd800 ||\n                first > 0xdbff ||\n                index + 1 === size ||\n                (second = s.charCodeAt(index + 1)) < 0xdc00 ||\n                second > 0xdfff\n                ? first\n                : ((first - 0xd800) << 10) + (second - 0xdc00) + 0x10000;\n        };\nvar trimStart = hasTrimStart\n    ? // Native\n        function trimStart(s) {\n            return s.trimStart();\n        }\n    : // Ponyfill\n        function trimStart(s) {\n            return s.replace(SPACE_SEPARATOR_START_REGEX, '');\n        };\nvar trimEnd = hasTrimEnd\n    ? // Native\n        function trimEnd(s) {\n            return s.trimEnd();\n        }\n    : // Ponyfill\n        function trimEnd(s) {\n            return s.replace(SPACE_SEPARATOR_END_REGEX, '');\n        };\n// Prevent minifier to translate new RegExp to literal form that might cause syntax error on IE11.\nfunction RE(s, flag) {\n    return new RegExp(s, flag);\n}\n// #endregion\nvar matchIdentifierAtIndex;\nif (REGEX_SUPPORTS_U_AND_Y) {\n    // Native\n    var IDENTIFIER_PREFIX_RE_1 = RE('([^\\\\p{White_Space}\\\\p{Pattern_Syntax}]*)', 'yu');\n    matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {\n        var _a;\n        IDENTIFIER_PREFIX_RE_1.lastIndex = index;\n        var match = IDENTIFIER_PREFIX_RE_1.exec(s);\n        return (_a = match[1]) !== null && _a !== void 0 ? _a : '';\n    };\n}\nelse {\n    // IE11\n    matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {\n        var match = [];\n        while (true) {\n            var c = codePointAt(s, index);\n            if (c === undefined || _isWhiteSpace(c) || _isPatternSyntax(c)) {\n                break;\n            }\n            match.push(c);\n            index += c >= 0x10000 ? 2 : 1;\n        }\n        return fromCodePoint.apply(void 0, match);\n    };\n}\nvar Parser = /** @class */ (function () {\n    function Parser(message, options) {\n        if (options === void 0) { options = {}; }\n        this.message = message;\n        this.position = { offset: 0, line: 1, column: 1 };\n        this.ignoreTag = !!options.ignoreTag;\n        this.requiresOtherClause = !!options.requiresOtherClause;\n        this.shouldParseSkeletons = !!options.shouldParseSkeletons;\n    }\n    Parser.prototype.parse = function () {\n        if (this.offset() !== 0) {\n            throw Error('parser can only be used once');\n        }\n        return this.parseMessage(0, '', false);\n    };\n    Parser.prototype.parseMessage = function (nestingLevel, parentArgType, expectingCloseTag) {\n        var elements = [];\n        while (!this.isEOF()) {\n            var char = this.char();\n            if (char === 123 /* `{` */) {\n                var result = this.parseArgument(nestingLevel, expectingCloseTag);\n                if (result.err) {\n                    return result;\n                }\n                elements.push(result.val);\n            }\n            else if (char === 125 /* `}` */ && nestingLevel > 0) {\n                break;\n            }\n            else if (char === 35 /* `#` */ &&\n                (parentArgType === 'plural' || parentArgType === 'selectordinal')) {\n                var position = this.clonePosition();\n                this.bump();\n                elements.push({\n                    type: TYPE.pound,\n                    location: createLocation(position, this.clonePosition()),\n                });\n            }\n            else if (char === 60 /* `<` */ &&\n                !this.ignoreTag &&\n                this.peek() === 47 // char code for '/'\n            ) {\n                if (expectingCloseTag) {\n                    break;\n                }\n                else {\n                    return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));\n                }\n            }\n            else if (char === 60 /* `<` */ &&\n                !this.ignoreTag &&\n                _isAlpha(this.peek() || 0)) {\n                var result = this.parseTag(nestingLevel, parentArgType);\n                if (result.err) {\n                    return result;\n                }\n                elements.push(result.val);\n            }\n            else {\n                var result = this.parseLiteral(nestingLevel, parentArgType);\n                if (result.err) {\n                    return result;\n                }\n                elements.push(result.val);\n            }\n        }\n        return { val: elements, err: null };\n    };\n    /**\n     * A tag name must start with an ASCII lower/upper case letter. The grammar is based on the\n     * [custom element name][] except that a dash is NOT always mandatory and uppercase letters\n     * are accepted:\n     *\n     * ```\n     * tag ::= \"<\" tagName (whitespace)* \"/>\" | \"<\" tagName (whitespace)* \">\" message \"</\" tagName (whitespace)* \">\"\n     * tagName ::= [a-z] (PENChar)*\n     * PENChar ::=\n     *     \"-\" | \".\" | [0-9] | \"_\" | [a-z] | [A-Z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |\n     *     [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] |\n     *     [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\n     * ```\n     *\n     * [custom element name]: https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n     * NOTE: We're a bit more lax here since HTML technically does not allow uppercase HTML element but we do\n     * since other tag-based engines like React allow it\n     */\n    Parser.prototype.parseTag = function (nestingLevel, parentArgType) {\n        var startPosition = this.clonePosition();\n        this.bump(); // `<`\n        var tagName = this.parseTagName();\n        this.bumpSpace();\n        if (this.bumpIf('/>')) {\n            // Self closing tag\n            return {\n                val: {\n                    type: TYPE.literal,\n                    value: \"<\" + tagName + \"/>\",\n                    location: createLocation(startPosition, this.clonePosition()),\n                },\n                err: null,\n            };\n        }\n        else if (this.bumpIf('>')) {\n            var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);\n            if (childrenResult.err) {\n                return childrenResult;\n            }\n            var children = childrenResult.val;\n            // Expecting a close tag\n            var endTagStartPosition = this.clonePosition();\n            if (this.bumpIf('</')) {\n                if (this.isEOF() || !_isAlpha(this.char())) {\n                    return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));\n                }\n                var closingTagNameStartPosition = this.clonePosition();\n                var closingTagName = this.parseTagName();\n                if (tagName !== closingTagName) {\n                    return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));\n                }\n                this.bumpSpace();\n                if (!this.bumpIf('>')) {\n                    return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));\n                }\n                return {\n                    val: {\n                        type: TYPE.tag,\n                        value: tagName,\n                        children: children,\n                        location: createLocation(startPosition, this.clonePosition()),\n                    },\n                    err: null,\n                };\n            }\n            else {\n                return this.error(ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));\n            }\n        }\n        else {\n            return this.error(ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));\n        }\n    };\n    /**\n     * This method assumes that the caller has peeked ahead for the first tag character.\n     */\n    Parser.prototype.parseTagName = function () {\n        var startOffset = this.offset();\n        this.bump(); // the first tag name character\n        while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {\n            this.bump();\n        }\n        return this.message.slice(startOffset, this.offset());\n    };\n    Parser.prototype.parseLiteral = function (nestingLevel, parentArgType) {\n        var start = this.clonePosition();\n        var value = '';\n        while (true) {\n            var parseQuoteResult = this.tryParseQuote(parentArgType);\n            if (parseQuoteResult) {\n                value += parseQuoteResult;\n                continue;\n            }\n            var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);\n            if (parseUnquotedResult) {\n                value += parseUnquotedResult;\n                continue;\n            }\n            var parseLeftAngleResult = this.tryParseLeftAngleBracket();\n            if (parseLeftAngleResult) {\n                value += parseLeftAngleResult;\n                continue;\n            }\n            break;\n        }\n        var location = createLocation(start, this.clonePosition());\n        return {\n            val: { type: TYPE.literal, value: value, location: location },\n            err: null,\n        };\n    };\n    Parser.prototype.tryParseLeftAngleBracket = function () {\n        if (!this.isEOF() &&\n            this.char() === 60 /* `<` */ &&\n            (this.ignoreTag ||\n                // If at the opening tag or closing tag position, bail.\n                !_isAlphaOrSlash(this.peek() || 0))) {\n            this.bump(); // `<`\n            return '<';\n        }\n        return null;\n    };\n    /**\n     * Starting with ICU 4.8, an ASCII apostrophe only starts quoted text if it immediately precedes\n     * a character that requires quoting (that is, \"only where needed\"), and works the same in\n     * nested messages as on the top level of the pattern. The new behavior is otherwise compatible.\n     */\n    Parser.prototype.tryParseQuote = function (parentArgType) {\n        if (this.isEOF() || this.char() !== 39 /* `'` */) {\n            return null;\n        }\n        // Parse escaped char following the apostrophe, or early return if there is no escaped char.\n        // Check if is valid escaped character\n        switch (this.peek()) {\n            case 39 /* `'` */:\n                // double quote, should return as a single quote.\n                this.bump();\n                this.bump();\n                return \"'\";\n            // '{', '<', '>', '}'\n            case 123:\n            case 60:\n            case 62:\n            case 125:\n                break;\n            case 35: // '#'\n                if (parentArgType === 'plural' || parentArgType === 'selectordinal') {\n                    break;\n                }\n                return null;\n            default:\n                return null;\n        }\n        this.bump(); // apostrophe\n        var codePoints = [this.char()]; // escaped char\n        this.bump();\n        // read chars until the optional closing apostrophe is found\n        while (!this.isEOF()) {\n            var ch = this.char();\n            if (ch === 39 /* `'` */) {\n                if (this.peek() === 39 /* `'` */) {\n                    codePoints.push(39);\n                    // Bump one more time because we need to skip 2 characters.\n                    this.bump();\n                }\n                else {\n                    // Optional closing apostrophe.\n                    this.bump();\n                    break;\n                }\n            }\n            else {\n                codePoints.push(ch);\n            }\n            this.bump();\n        }\n        return fromCodePoint.apply(void 0, codePoints);\n    };\n    Parser.prototype.tryParseUnquoted = function (nestingLevel, parentArgType) {\n        if (this.isEOF()) {\n            return null;\n        }\n        var ch = this.char();\n        if (ch === 60 /* `<` */ ||\n            ch === 123 /* `{` */ ||\n            (ch === 35 /* `#` */ &&\n                (parentArgType === 'plural' || parentArgType === 'selectordinal')) ||\n            (ch === 125 /* `}` */ && nestingLevel > 0)) {\n            return null;\n        }\n        else {\n            this.bump();\n            return fromCodePoint(ch);\n        }\n    };\n    Parser.prototype.parseArgument = function (nestingLevel, expectingCloseTag) {\n        var openingBracePosition = this.clonePosition();\n        this.bump(); // `{`\n        this.bumpSpace();\n        if (this.isEOF()) {\n            return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        if (this.char() === 125 /* `}` */) {\n            this.bump();\n            return this.error(ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        // argument name\n        var value = this.parseIdentifierIfPossible().value;\n        if (!value) {\n            return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        this.bumpSpace();\n        if (this.isEOF()) {\n            return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        switch (this.char()) {\n            // Simple argument: `{name}`\n            case 125 /* `}` */: {\n                this.bump(); // `}`\n                return {\n                    val: {\n                        type: TYPE.argument,\n                        // value does not include the opening and closing braces.\n                        value: value,\n                        location: createLocation(openingBracePosition, this.clonePosition()),\n                    },\n                    err: null,\n                };\n            }\n            // Argument with options: `{name, format, ...}`\n            case 44 /* `,` */: {\n                this.bump(); // `,`\n                this.bumpSpace();\n                if (this.isEOF()) {\n                    return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n                }\n                return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);\n            }\n            default:\n                return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n        }\n    };\n    /**\n     * Advance the parser until the end of the identifier, if it is currently on\n     * an identifier character. Return an empty string otherwise.\n     */\n    Parser.prototype.parseIdentifierIfPossible = function () {\n        var startingPosition = this.clonePosition();\n        var startOffset = this.offset();\n        var value = matchIdentifierAtIndex(this.message, startOffset);\n        var endOffset = startOffset + value.length;\n        this.bumpTo(endOffset);\n        var endPosition = this.clonePosition();\n        var location = createLocation(startingPosition, endPosition);\n        return { value: value, location: location };\n    };\n    Parser.prototype.parseArgumentOptions = function (nestingLevel, expectingCloseTag, value, openingBracePosition) {\n        var _a;\n        // Parse this range:\n        // {name, type, style}\n        //        ^---^\n        var typeStartPosition = this.clonePosition();\n        var argType = this.parseIdentifierIfPossible().value;\n        var typeEndPosition = this.clonePosition();\n        switch (argType) {\n            case '':\n                // Expecting a style string number, date, time, plural, selectordinal, or select.\n                return this.error(ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));\n            case 'number':\n            case 'date':\n            case 'time': {\n                // Parse this range:\n                // {name, number, style}\n                //              ^-------^\n                this.bumpSpace();\n                var styleAndLocation = null;\n                if (this.bumpIf(',')) {\n                    this.bumpSpace();\n                    var styleStartPosition = this.clonePosition();\n                    var result = this.parseSimpleArgStyleIfPossible();\n                    if (result.err) {\n                        return result;\n                    }\n                    var style = trimEnd(result.val);\n                    if (style.length === 0) {\n                        return this.error(ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));\n                    }\n                    var styleLocation = createLocation(styleStartPosition, this.clonePosition());\n                    styleAndLocation = { style: style, styleLocation: styleLocation };\n                }\n                var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n                if (argCloseResult.err) {\n                    return argCloseResult;\n                }\n                var location_1 = createLocation(openingBracePosition, this.clonePosition());\n                // Extract style or skeleton\n                if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, '::', 0)) {\n                    // Skeleton starts with `::`.\n                    var skeleton = trimStart(styleAndLocation.style.slice(2));\n                    if (argType === 'number') {\n                        var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);\n                        if (result.err) {\n                            return result;\n                        }\n                        return {\n                            val: { type: TYPE.number, value: value, location: location_1, style: result.val },\n                            err: null,\n                        };\n                    }\n                    else {\n                        if (skeleton.length === 0) {\n                            return this.error(ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);\n                        }\n                        var style = {\n                            type: SKELETON_TYPE.dateTime,\n                            pattern: skeleton,\n                            location: styleAndLocation.styleLocation,\n                            parsedOptions: this.shouldParseSkeletons\n                                ? parseDateTimeSkeleton(skeleton)\n                                : {},\n                        };\n                        var type = argType === 'date' ? TYPE.date : TYPE.time;\n                        return {\n                            val: { type: type, value: value, location: location_1, style: style },\n                            err: null,\n                        };\n                    }\n                }\n                // Regular style or no style.\n                return {\n                    val: {\n                        type: argType === 'number'\n                            ? TYPE.number\n                            : argType === 'date'\n                                ? TYPE.date\n                                : TYPE.time,\n                        value: value,\n                        location: location_1,\n                        style: (_a = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a !== void 0 ? _a : null,\n                    },\n                    err: null,\n                };\n            }\n            case 'plural':\n            case 'selectordinal':\n            case 'select': {\n                // Parse this range:\n                // {name, plural, options}\n                //              ^---------^\n                var typeEndPosition_1 = this.clonePosition();\n                this.bumpSpace();\n                if (!this.bumpIf(',')) {\n                    return this.error(ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, __assign({}, typeEndPosition_1)));\n                }\n                this.bumpSpace();\n                // Parse offset:\n                // {name, plural, offset:1, options}\n                //                ^-----^\n                //\n                // or the first option:\n                //\n                // {name, plural, one {...} other {...}}\n                //                ^--^\n                var identifierAndLocation = this.parseIdentifierIfPossible();\n                var pluralOffset = 0;\n                if (argType !== 'select' && identifierAndLocation.value === 'offset') {\n                    if (!this.bumpIf(':')) {\n                        return this.error(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));\n                    }\n                    this.bumpSpace();\n                    var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);\n                    if (result.err) {\n                        return result;\n                    }\n                    // Parse another identifier for option parsing\n                    this.bumpSpace();\n                    identifierAndLocation = this.parseIdentifierIfPossible();\n                    pluralOffset = result.val;\n                }\n                var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);\n                if (optionsResult.err) {\n                    return optionsResult;\n                }\n                var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n                if (argCloseResult.err) {\n                    return argCloseResult;\n                }\n                var location_2 = createLocation(openingBracePosition, this.clonePosition());\n                if (argType === 'select') {\n                    return {\n                        val: {\n                            type: TYPE.select,\n                            value: value,\n                            options: fromEntries(optionsResult.val),\n                            location: location_2,\n                        },\n                        err: null,\n                    };\n                }\n                else {\n                    return {\n                        val: {\n                            type: TYPE.plural,\n                            value: value,\n                            options: fromEntries(optionsResult.val),\n                            offset: pluralOffset,\n                            pluralType: argType === 'plural' ? 'cardinal' : 'ordinal',\n                            location: location_2,\n                        },\n                        err: null,\n                    };\n                }\n            }\n            default:\n                return this.error(ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));\n        }\n    };\n    Parser.prototype.tryParseArgumentClose = function (openingBracePosition) {\n        // Parse: {value, number, ::currency/GBP }\n        //\n        if (this.isEOF() || this.char() !== 125 /* `}` */) {\n            return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        this.bump(); // `}`\n        return { val: true, err: null };\n    };\n    /**\n     * See: https://github.com/unicode-org/icu/blob/af7ed1f6d2298013dc303628438ec4abe1f16479/icu4c/source/common/messagepattern.cpp#L659\n     */\n    Parser.prototype.parseSimpleArgStyleIfPossible = function () {\n        var nestedBraces = 0;\n        var startPosition = this.clonePosition();\n        while (!this.isEOF()) {\n            var ch = this.char();\n            switch (ch) {\n                case 39 /* `'` */: {\n                    // Treat apostrophe as quoting but include it in the style part.\n                    // Find the end of the quoted literal text.\n                    this.bump();\n                    var apostrophePosition = this.clonePosition();\n                    if (!this.bumpUntil(\"'\")) {\n                        return this.error(ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));\n                    }\n                    this.bump();\n                    break;\n                }\n                case 123 /* `{` */: {\n                    nestedBraces += 1;\n                    this.bump();\n                    break;\n                }\n                case 125 /* `}` */: {\n                    if (nestedBraces > 0) {\n                        nestedBraces -= 1;\n                    }\n                    else {\n                        return {\n                            val: this.message.slice(startPosition.offset, this.offset()),\n                            err: null,\n                        };\n                    }\n                    break;\n                }\n                default:\n                    this.bump();\n                    break;\n            }\n        }\n        return {\n            val: this.message.slice(startPosition.offset, this.offset()),\n            err: null,\n        };\n    };\n    Parser.prototype.parseNumberSkeletonFromString = function (skeleton, location) {\n        var tokens = [];\n        try {\n            tokens = parseNumberSkeletonFromString(skeleton);\n        }\n        catch (e) {\n            return this.error(ErrorKind.INVALID_NUMBER_SKELETON, location);\n        }\n        return {\n            val: {\n                type: SKELETON_TYPE.number,\n                tokens: tokens,\n                location: location,\n                parsedOptions: this.shouldParseSkeletons\n                    ? parseNumberSkeleton(tokens)\n                    : {},\n            },\n            err: null,\n        };\n    };\n    /**\n     * @param nesting_level The current nesting level of messages.\n     *     This can be positive when parsing message fragment in select or plural argument options.\n     * @param parent_arg_type The parent argument's type.\n     * @param parsed_first_identifier If provided, this is the first identifier-like selector of\n     *     the argument. It is a by-product of a previous parsing attempt.\n     * @param expecting_close_tag If true, this message is directly or indirectly nested inside\n     *     between a pair of opening and closing tags. The nested message will not parse beyond\n     *     the closing tag boundary.\n     */\n    Parser.prototype.tryParsePluralOrSelectOptions = function (nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {\n        var _a;\n        var hasOtherClause = false;\n        var options = [];\n        var parsedSelectors = new Set();\n        var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;\n        // Parse:\n        // one {one apple}\n        // ^--^\n        while (true) {\n            if (selector.length === 0) {\n                var startPosition = this.clonePosition();\n                if (parentArgType !== 'select' && this.bumpIf('=')) {\n                    // Try parse `={number}` selector\n                    var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);\n                    if (result.err) {\n                        return result;\n                    }\n                    selectorLocation = createLocation(startPosition, this.clonePosition());\n                    selector = this.message.slice(startPosition.offset, this.offset());\n                }\n                else {\n                    break;\n                }\n            }\n            // Duplicate selector clauses\n            if (parsedSelectors.has(selector)) {\n                return this.error(parentArgType === 'select'\n                    ? ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR\n                    : ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);\n            }\n            if (selector === 'other') {\n                hasOtherClause = true;\n            }\n            // Parse:\n            // one {one apple}\n            //     ^----------^\n            this.bumpSpace();\n            var openingBracePosition = this.clonePosition();\n            if (!this.bumpIf('{')) {\n                return this.error(parentArgType === 'select'\n                    ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\n                    : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));\n            }\n            var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);\n            if (fragmentResult.err) {\n                return fragmentResult;\n            }\n            var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n            if (argCloseResult.err) {\n                return argCloseResult;\n            }\n            options.push([\n                selector,\n                {\n                    value: fragmentResult.val,\n                    location: createLocation(openingBracePosition, this.clonePosition()),\n                },\n            ]);\n            // Keep track of the existing selectors\n            parsedSelectors.add(selector);\n            // Prep next selector clause.\n            this.bumpSpace();\n            (_a = this.parseIdentifierIfPossible(), selector = _a.value, selectorLocation = _a.location);\n        }\n        if (options.length === 0) {\n            return this.error(parentArgType === 'select'\n                ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR\n                : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));\n        }\n        if (this.requiresOtherClause && !hasOtherClause) {\n            return this.error(ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));\n        }\n        return { val: options, err: null };\n    };\n    Parser.prototype.tryParseDecimalInteger = function (expectNumberError, invalidNumberError) {\n        var sign = 1;\n        var startingPosition = this.clonePosition();\n        if (this.bumpIf('+')) {\n        }\n        else if (this.bumpIf('-')) {\n            sign = -1;\n        }\n        var hasDigits = false;\n        var decimal = 0;\n        while (!this.isEOF()) {\n            var ch = this.char();\n            if (ch >= 48 /* `0` */ && ch <= 57 /* `9` */) {\n                hasDigits = true;\n                decimal = decimal * 10 + (ch - 48);\n                this.bump();\n            }\n            else {\n                break;\n            }\n        }\n        var location = createLocation(startingPosition, this.clonePosition());\n        if (!hasDigits) {\n            return this.error(expectNumberError, location);\n        }\n        decimal *= sign;\n        if (!isSafeInteger(decimal)) {\n            return this.error(invalidNumberError, location);\n        }\n        return { val: decimal, err: null };\n    };\n    Parser.prototype.offset = function () {\n        return this.position.offset;\n    };\n    Parser.prototype.isEOF = function () {\n        return this.offset() === this.message.length;\n    };\n    Parser.prototype.clonePosition = function () {\n        // This is much faster than `Object.assign` or spread.\n        return {\n            offset: this.position.offset,\n            line: this.position.line,\n            column: this.position.column,\n        };\n    };\n    /**\n     * Return the code point at the current position of the parser.\n     * Throws if the index is out of bound.\n     */\n    Parser.prototype.char = function () {\n        var offset = this.position.offset;\n        if (offset >= this.message.length) {\n            throw Error('out of bound');\n        }\n        var code = codePointAt(this.message, offset);\n        if (code === undefined) {\n            throw Error(\"Offset \" + offset + \" is at invalid UTF-16 code unit boundary\");\n        }\n        return code;\n    };\n    Parser.prototype.error = function (kind, location) {\n        return {\n            val: null,\n            err: {\n                kind: kind,\n                message: this.message,\n                location: location,\n            },\n        };\n    };\n    /** Bump the parser to the next UTF-16 code unit. */\n    Parser.prototype.bump = function () {\n        if (this.isEOF()) {\n            return;\n        }\n        var code = this.char();\n        if (code === 10 /* '\\n' */) {\n            this.position.line += 1;\n            this.position.column = 1;\n            this.position.offset += 1;\n        }\n        else {\n            this.position.column += 1;\n            // 0 ~ 0x10000 -> unicode BMP, otherwise skip the surrogate pair.\n            this.position.offset += code < 0x10000 ? 1 : 2;\n        }\n    };\n    /**\n     * If the substring starting at the current position of the parser has\n     * the given prefix, then bump the parser to the character immediately\n     * following the prefix and return true. Otherwise, don't bump the parser\n     * and return false.\n     */\n    Parser.prototype.bumpIf = function (prefix) {\n        if (startsWith(this.message, prefix, this.offset())) {\n            for (var i = 0; i < prefix.length; i++) {\n                this.bump();\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Bump the parser until the pattern character is found and return `true`.\n     * Otherwise bump to the end of the file and return `false`.\n     */\n    Parser.prototype.bumpUntil = function (pattern) {\n        var currentOffset = this.offset();\n        var index = this.message.indexOf(pattern, currentOffset);\n        if (index >= 0) {\n            this.bumpTo(index);\n            return true;\n        }\n        else {\n            this.bumpTo(this.message.length);\n            return false;\n        }\n    };\n    /**\n     * Bump the parser to the target offset.\n     * If target offset is beyond the end of the input, bump the parser to the end of the input.\n     */\n    Parser.prototype.bumpTo = function (targetOffset) {\n        if (this.offset() > targetOffset) {\n            throw Error(\"targetOffset \" + targetOffset + \" must be greater than or equal to the current offset \" + this.offset());\n        }\n        targetOffset = Math.min(targetOffset, this.message.length);\n        while (true) {\n            var offset = this.offset();\n            if (offset === targetOffset) {\n                break;\n            }\n            if (offset > targetOffset) {\n                throw Error(\"targetOffset \" + targetOffset + \" is at invalid UTF-16 code unit boundary\");\n            }\n            this.bump();\n            if (this.isEOF()) {\n                break;\n            }\n        }\n    };\n    /** advance the parser through all whitespace to the next non-whitespace code unit. */\n    Parser.prototype.bumpSpace = function () {\n        while (!this.isEOF() && _isWhiteSpace(this.char())) {\n            this.bump();\n        }\n    };\n    /**\n     * Peek at the *next* Unicode codepoint in the input without advancing the parser.\n     * If the input has been exhausted, then this returns null.\n     */\n    Parser.prototype.peek = function () {\n        if (this.isEOF()) {\n            return null;\n        }\n        var code = this.char();\n        var offset = this.offset();\n        var nextCode = this.message.charCodeAt(offset + (code >= 0x10000 ? 2 : 1));\n        return nextCode !== null && nextCode !== void 0 ? nextCode : null;\n    };\n    return Parser;\n}());\nexport { Parser };\n/**\n * This check if codepoint is alphabet (lower & uppercase)\n * @param codepoint\n * @returns\n */\nfunction _isAlpha(codepoint) {\n    return ((codepoint >= 97 && codepoint <= 122) ||\n        (codepoint >= 65 && codepoint <= 90));\n}\nfunction _isAlphaOrSlash(codepoint) {\n    return _isAlpha(codepoint) || codepoint === 47; /* '/' */\n}\n/** See `parseTag` function docs. */\nfunction _isPotentialElementNameChar(c) {\n    return (c === 45 /* '-' */ ||\n        c === 46 /* '.' */ ||\n        (c >= 48 && c <= 57) /* 0..9 */ ||\n        c === 95 /* '_' */ ||\n        (c >= 97 && c <= 122) /** a..z */ ||\n        (c >= 65 && c <= 90) /* A..Z */ ||\n        c == 0xb7 ||\n        (c >= 0xc0 && c <= 0xd6) ||\n        (c >= 0xd8 && c <= 0xf6) ||\n        (c >= 0xf8 && c <= 0x37d) ||\n        (c >= 0x37f && c <= 0x1fff) ||\n        (c >= 0x200c && c <= 0x200d) ||\n        (c >= 0x203f && c <= 0x2040) ||\n        (c >= 0x2070 && c <= 0x218f) ||\n        (c >= 0x2c00 && c <= 0x2fef) ||\n        (c >= 0x3001 && c <= 0xd7ff) ||\n        (c >= 0xf900 && c <= 0xfdcf) ||\n        (c >= 0xfdf0 && c <= 0xfffd) ||\n        (c >= 0x10000 && c <= 0xeffff));\n}\n/**\n * Code point equivalent of regex `\\p{White_Space}`.\n * From: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n */\nfunction _isWhiteSpace(c) {\n    return ((c >= 0x0009 && c <= 0x000d) ||\n        c === 0x0020 ||\n        c === 0x0085 ||\n        (c >= 0x200e && c <= 0x200f) ||\n        c === 0x2028 ||\n        c === 0x2029);\n}\n/**\n * Code point equivalent of regex `\\p{Pattern_Syntax}`.\n * See https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n */\nfunction _isPatternSyntax(c) {\n    return ((c >= 0x0021 && c <= 0x0023) ||\n        c === 0x0024 ||\n        (c >= 0x0025 && c <= 0x0027) ||\n        c === 0x0028 ||\n        c === 0x0029 ||\n        c === 0x002a ||\n        c === 0x002b ||\n        c === 0x002c ||\n        c === 0x002d ||\n        (c >= 0x002e && c <= 0x002f) ||\n        (c >= 0x003a && c <= 0x003b) ||\n        (c >= 0x003c && c <= 0x003e) ||\n        (c >= 0x003f && c <= 0x0040) ||\n        c === 0x005b ||\n        c === 0x005c ||\n        c === 0x005d ||\n        c === 0x005e ||\n        c === 0x0060 ||\n        c === 0x007b ||\n        c === 0x007c ||\n        c === 0x007d ||\n        c === 0x007e ||\n        c === 0x00a1 ||\n        (c >= 0x00a2 && c <= 0x00a5) ||\n        c === 0x00a6 ||\n        c === 0x00a7 ||\n        c === 0x00a9 ||\n        c === 0x00ab ||\n        c === 0x00ac ||\n        c === 0x00ae ||\n        c === 0x00b0 ||\n        c === 0x00b1 ||\n        c === 0x00b6 ||\n        c === 0x00bb ||\n        c === 0x00bf ||\n        c === 0x00d7 ||\n        c === 0x00f7 ||\n        (c >= 0x2010 && c <= 0x2015) ||\n        (c >= 0x2016 && c <= 0x2017) ||\n        c === 0x2018 ||\n        c === 0x2019 ||\n        c === 0x201a ||\n        (c >= 0x201b && c <= 0x201c) ||\n        c === 0x201d ||\n        c === 0x201e ||\n        c === 0x201f ||\n        (c >= 0x2020 && c <= 0x2027) ||\n        (c >= 0x2030 && c <= 0x2038) ||\n        c === 0x2039 ||\n        c === 0x203a ||\n        (c >= 0x203b && c <= 0x203e) ||\n        (c >= 0x2041 && c <= 0x2043) ||\n        c === 0x2044 ||\n        c === 0x2045 ||\n        c === 0x2046 ||\n        (c >= 0x2047 && c <= 0x2051) ||\n        c === 0x2052 ||\n        c === 0x2053 ||\n        (c >= 0x2055 && c <= 0x205e) ||\n        (c >= 0x2190 && c <= 0x2194) ||\n        (c >= 0x2195 && c <= 0x2199) ||\n        (c >= 0x219a && c <= 0x219b) ||\n        (c >= 0x219c && c <= 0x219f) ||\n        c === 0x21a0 ||\n        (c >= 0x21a1 && c <= 0x21a2) ||\n        c === 0x21a3 ||\n        (c >= 0x21a4 && c <= 0x21a5) ||\n        c === 0x21a6 ||\n        (c >= 0x21a7 && c <= 0x21ad) ||\n        c === 0x21ae ||\n        (c >= 0x21af && c <= 0x21cd) ||\n        (c >= 0x21ce && c <= 0x21cf) ||\n        (c >= 0x21d0 && c <= 0x21d1) ||\n        c === 0x21d2 ||\n        c === 0x21d3 ||\n        c === 0x21d4 ||\n        (c >= 0x21d5 && c <= 0x21f3) ||\n        (c >= 0x21f4 && c <= 0x22ff) ||\n        (c >= 0x2300 && c <= 0x2307) ||\n        c === 0x2308 ||\n        c === 0x2309 ||\n        c === 0x230a ||\n        c === 0x230b ||\n        (c >= 0x230c && c <= 0x231f) ||\n        (c >= 0x2320 && c <= 0x2321) ||\n        (c >= 0x2322 && c <= 0x2328) ||\n        c === 0x2329 ||\n        c === 0x232a ||\n        (c >= 0x232b && c <= 0x237b) ||\n        c === 0x237c ||\n        (c >= 0x237d && c <= 0x239a) ||\n        (c >= 0x239b && c <= 0x23b3) ||\n        (c >= 0x23b4 && c <= 0x23db) ||\n        (c >= 0x23dc && c <= 0x23e1) ||\n        (c >= 0x23e2 && c <= 0x2426) ||\n        (c >= 0x2427 && c <= 0x243f) ||\n        (c >= 0x2440 && c <= 0x244a) ||\n        (c >= 0x244b && c <= 0x245f) ||\n        (c >= 0x2500 && c <= 0x25b6) ||\n        c === 0x25b7 ||\n        (c >= 0x25b8 && c <= 0x25c0) ||\n        c === 0x25c1 ||\n        (c >= 0x25c2 && c <= 0x25f7) ||\n        (c >= 0x25f8 && c <= 0x25ff) ||\n        (c >= 0x2600 && c <= 0x266e) ||\n        c === 0x266f ||\n        (c >= 0x2670 && c <= 0x2767) ||\n        c === 0x2768 ||\n        c === 0x2769 ||\n        c === 0x276a ||\n        c === 0x276b ||\n        c === 0x276c ||\n        c === 0x276d ||\n        c === 0x276e ||\n        c === 0x276f ||\n        c === 0x2770 ||\n        c === 0x2771 ||\n        c === 0x2772 ||\n        c === 0x2773 ||\n        c === 0x2774 ||\n        c === 0x2775 ||\n        (c >= 0x2794 && c <= 0x27bf) ||\n        (c >= 0x27c0 && c <= 0x27c4) ||\n        c === 0x27c5 ||\n        c === 0x27c6 ||\n        (c >= 0x27c7 && c <= 0x27e5) ||\n        c === 0x27e6 ||\n        c === 0x27e7 ||\n        c === 0x27e8 ||\n        c === 0x27e9 ||\n        c === 0x27ea ||\n        c === 0x27eb ||\n        c === 0x27ec ||\n        c === 0x27ed ||\n        c === 0x27ee ||\n        c === 0x27ef ||\n        (c >= 0x27f0 && c <= 0x27ff) ||\n        (c >= 0x2800 && c <= 0x28ff) ||\n        (c >= 0x2900 && c <= 0x2982) ||\n        c === 0x2983 ||\n        c === 0x2984 ||\n        c === 0x2985 ||\n        c === 0x2986 ||\n        c === 0x2987 ||\n        c === 0x2988 ||\n        c === 0x2989 ||\n        c === 0x298a ||\n        c === 0x298b ||\n        c === 0x298c ||\n        c === 0x298d ||\n        c === 0x298e ||\n        c === 0x298f ||\n        c === 0x2990 ||\n        c === 0x2991 ||\n        c === 0x2992 ||\n        c === 0x2993 ||\n        c === 0x2994 ||\n        c === 0x2995 ||\n        c === 0x2996 ||\n        c === 0x2997 ||\n        c === 0x2998 ||\n        (c >= 0x2999 && c <= 0x29d7) ||\n        c === 0x29d8 ||\n        c === 0x29d9 ||\n        c === 0x29da ||\n        c === 0x29db ||\n        (c >= 0x29dc && c <= 0x29fb) ||\n        c === 0x29fc ||\n        c === 0x29fd ||\n        (c >= 0x29fe && c <= 0x2aff) ||\n        (c >= 0x2b00 && c <= 0x2b2f) ||\n        (c >= 0x2b30 && c <= 0x2b44) ||\n        (c >= 0x2b45 && c <= 0x2b46) ||\n        (c >= 0x2b47 && c <= 0x2b4c) ||\n        (c >= 0x2b4d && c <= 0x2b73) ||\n        (c >= 0x2b74 && c <= 0x2b75) ||\n        (c >= 0x2b76 && c <= 0x2b95) ||\n        c === 0x2b96 ||\n        (c >= 0x2b97 && c <= 0x2bff) ||\n        (c >= 0x2e00 && c <= 0x2e01) ||\n        c === 0x2e02 ||\n        c === 0x2e03 ||\n        c === 0x2e04 ||\n        c === 0x2e05 ||\n        (c >= 0x2e06 && c <= 0x2e08) ||\n        c === 0x2e09 ||\n        c === 0x2e0a ||\n        c === 0x2e0b ||\n        c === 0x2e0c ||\n        c === 0x2e0d ||\n        (c >= 0x2e0e && c <= 0x2e16) ||\n        c === 0x2e17 ||\n        (c >= 0x2e18 && c <= 0x2e19) ||\n        c === 0x2e1a ||\n        c === 0x2e1b ||\n        c === 0x2e1c ||\n        c === 0x2e1d ||\n        (c >= 0x2e1e && c <= 0x2e1f) ||\n        c === 0x2e20 ||\n        c === 0x2e21 ||\n        c === 0x2e22 ||\n        c === 0x2e23 ||\n        c === 0x2e24 ||\n        c === 0x2e25 ||\n        c === 0x2e26 ||\n        c === 0x2e27 ||\n        c === 0x2e28 ||\n        c === 0x2e29 ||\n        (c >= 0x2e2a && c <= 0x2e2e) ||\n        c === 0x2e2f ||\n        (c >= 0x2e30 && c <= 0x2e39) ||\n        (c >= 0x2e3a && c <= 0x2e3b) ||\n        (c >= 0x2e3c && c <= 0x2e3f) ||\n        c === 0x2e40 ||\n        c === 0x2e41 ||\n        c === 0x2e42 ||\n        (c >= 0x2e43 && c <= 0x2e4f) ||\n        (c >= 0x2e50 && c <= 0x2e51) ||\n        c === 0x2e52 ||\n        (c >= 0x2e53 && c <= 0x2e7f) ||\n        (c >= 0x3001 && c <= 0x3003) ||\n        c === 0x3008 ||\n        c === 0x3009 ||\n        c === 0x300a ||\n        c === 0x300b ||\n        c === 0x300c ||\n        c === 0x300d ||\n        c === 0x300e ||\n        c === 0x300f ||\n        c === 0x3010 ||\n        c === 0x3011 ||\n        (c >= 0x3012 && c <= 0x3013) ||\n        c === 0x3014 ||\n        c === 0x3015 ||\n        c === 0x3016 ||\n        c === 0x3017 ||\n        c === 0x3018 ||\n        c === 0x3019 ||\n        c === 0x301a ||\n        c === 0x301b ||\n        c === 0x301c ||\n        c === 0x301d ||\n        (c >= 0x301e && c <= 0x301f) ||\n        c === 0x3020 ||\n        c === 0x3030 ||\n        c === 0xfd3e ||\n        c === 0xfd3f ||\n        (c >= 0xfe45 && c <= 0xfe46));\n}\n","import { __assign } from \"tslib\";\nimport { ErrorKind } from './error';\nimport { Parser } from './parser';\nimport { isDateElement, isDateTimeSkeleton, isNumberElement, isNumberSkeleton, isPluralElement, isSelectElement, isTagElement, isTimeElement, } from './types';\nfunction pruneLocation(els) {\n    els.forEach(function (el) {\n        delete el.location;\n        if (isSelectElement(el) || isPluralElement(el)) {\n            for (var k in el.options) {\n                delete el.options[k].location;\n                pruneLocation(el.options[k].value);\n            }\n        }\n        else if (isNumberElement(el) && isNumberSkeleton(el.style)) {\n            delete el.style.location;\n        }\n        else if ((isDateElement(el) || isTimeElement(el)) &&\n            isDateTimeSkeleton(el.style)) {\n            delete el.style.location;\n        }\n        else if (isTagElement(el)) {\n            pruneLocation(el.children);\n        }\n    });\n}\nexport function parse(message, opts) {\n    if (opts === void 0) { opts = {}; }\n    opts = __assign({ shouldParseSkeletons: true, requiresOtherClause: true }, opts);\n    var result = new Parser(message, opts).parse();\n    if (result.err) {\n        var error = SyntaxError(ErrorKind[result.err.kind]);\n        // @ts-expect-error Assign to error object\n        error.location = result.err.location;\n        // @ts-expect-error Assign to error object\n        error.originalMessage = result.err.message;\n        throw error;\n    }\n    if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {\n        pruneLocation(result.val);\n    }\n    return result.val;\n}\nexport * from './types';\n"],"names":["Object","defineProperty","exports","value","generateENXB","generateENXA","generateXXHA","generateXXAC","generateXXLS","tslib_1","require","icu_messageformat_parser_1","msg","ast","parse","lastChunk","pop","isLiteralElement","__spreadArray","type","TYPE","literal","forEach","el","toUpperCase","isPluralElement","isSelectElement","_i","_a","values","options","length","isTagElement","children","firstChunk","shift","ASCII","ACCENTED_ASCII","split","map","c","i","indexOf","join","pseudoString","index","repeat","ErrorKind","SKELETON_TYPE","isArgumentElement","argument","isNumberElement","number","isDateElement","date","isTimeElement","time","select","plural","isPoundElement","pound","tag","isNumberSkeleton","isDateTimeSkeleton","dateTime","createLiteralElement","createNumberElement","style","SPACE_SEPARATOR_REGEX","DATE_TIME_REGEX","parseDateTimeSkeleton","skeleton","result","replace","match","len","era","year","RangeError","month","day","weekday","hour12","hourCycle","hour","minute","second","timeZoneName","WHITE_SPACE_REGEX","FRACTION_PRECISION_REGEX","SIGNIFICANT_PRECISION_REGEX","INTEGER_WIDTH_REGEX","CONCISE_INTEGER_WIDTH_REGEX","parseSignificantPrecision","str","_","g1","g2","minimumSignificantDigits","maximumSignificantDigits","parseSign","signDisplay","currencySign","parseConciseScientificAndEngineeringStem","stem","notation","slice","test","Error","minimumIntegerDigits","parseNotationOptions","opt","signOpts","parseNumberSkeleton","tokens","tokens_1","token","scale","currency","useGrouping","maximumFractionDigits","unit","compactDisplay","__assign","reduce","all","currencyDisplay","unitDisplay","parseFloat","g3","g4","g5","minimumFractionDigits","conciseScientificAndEngineeringOpts","SPACE_SEPARATOR_START_REGEX","RegExp","source","SPACE_SEPARATOR_END_REGEX","createLocation","start","end","hasNativeStartsWith","String","prototype","startsWith","hasNativeFromCodePoint","fromCodePoint","hasNativeFromEntries","fromEntries","hasNativeCodePointAt","codePointAt","hasTrimStart","trimStart","hasTrimEnd","trimEnd","isSafeInteger","Number","n","isFinite","Math","floor","abs","REGEX_SUPPORTS_U_AND_Y","RE","exec","matchIdentifierAtIndex","s","search","position","codePoints","arguments","code","elements","fromCharCode","entries","obj","entries_1","k","v","size","first","charCodeAt","flag","IDENTIFIER_PREFIX_RE_1","lastIndex","undefined","_isWhiteSpace","_isPatternSyntax","push","apply","Parser","message","this","offset","line","column","ignoreTag","requiresOtherClause","shouldParseSkeletons","parseMessage","nestingLevel","parentArgType","expectingCloseTag","isEOF","char","parseArgument","err","val","peek","error","UNMATCHED_CLOSING_TAG","clonePosition","_isAlpha","parseTag","parseLiteral","bump","location","startPosition","tagName","parseTagName","bumpSpace","bumpIf","childrenResult","endTagStartPosition","INVALID_TAG","closingTagNameStartPosition","UNCLOSED_TAG","startOffset","parseQuoteResult","tryParseQuote","parseUnquotedResult","tryParseUnquoted","parseLeftAngleResult","tryParseLeftAngleBracket","codepoint","ch","openingBracePosition","EXPECT_ARGUMENT_CLOSING_BRACE","EMPTY_ARGUMENT","parseIdentifierIfPossible","MALFORMED_ARGUMENT","parseArgumentOptions","startingPosition","endOffset","bumpTo","typeStartPosition","argType","typeEndPosition","EXPECT_ARGUMENT_TYPE","styleAndLocation","styleStartPosition","parseSimpleArgStyleIfPossible","EXPECT_ARGUMENT_STYLE","styleLocation","argCloseResult","tryParseArgumentClose","location_1","parseNumberSkeletonFromString","EXPECT_DATE_TIME_SKELETON","pattern","parsedOptions","typeEndPosition_1","EXPECT_SELECT_ARGUMENT_OPTIONS","identifierAndLocation","pluralOffset","EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE","tryParseDecimalInteger","INVALID_PLURAL_ARGUMENT_OFFSET_VALUE","optionsResult","tryParsePluralOrSelectOptions","location_2","pluralType","INVALID_ARGUMENT_TYPE","nestedBraces","apostrophePosition","bumpUntil","UNCLOSED_QUOTE_IN_ARGUMENT_STYLE","stringTokens_1","filter","x","stemAndOptions","options_1","e","INVALID_NUMBER_SKELETON","expectCloseTag","parsedFirstIdentifier","hasOtherClause","parsedSelectors","Set","selector","selectorLocation","EXPECT_PLURAL_ARGUMENT_SELECTOR","INVALID_PLURAL_ARGUMENT_SELECTOR","has","DUPLICATE_SELECT_ARGUMENT_SELECTOR","DUPLICATE_PLURAL_ARGUMENT_SELECTOR","EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT","EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT","fragmentResult","add","EXPECT_SELECT_ARGUMENT_SELECTOR","MISSING_OTHER_CLAUSE","expectNumberError","invalidNumberError","sign","hasDigits","decimal","kind","prefix","currentOffset","targetOffset","min","nextCode","pruneLocation","els","opts","SyntaxError","originalMessage","captureLocation"],"sourceRoot":""}